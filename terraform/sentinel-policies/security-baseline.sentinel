# Security Baseline Policy for AI Infrastructure
# Enforces security best practices for ML/AI deployments
# Covers encryption, network isolation, and secure configurations

import "tfplan/v2" as tfplan
import "strings"

# Parameters with defaults
param require_encryption default true
param require_private_endpoints default true
param require_vpc_isolation default true
param allowed_amis default ["ami-ml-base-*", "ami-nvidia-*", "ami-deeplearning-*"]
param require_imdsv2 default true

# Check encryption on all AI/ML resources
encryption_check = rule {
  all tfplan.resource_changes as _, rc {
    # S3 buckets for model artifacts
    rc.type != "aws_s3_bucket" or
    check_s3_encryption(rc)
  } and
  all tfplan.resource_changes as _, rc {
    # SageMaker resources
    rc.type not in ["aws_sagemaker_endpoint_configuration", "aws_sagemaker_notebook_instance"] or
    check_sagemaker_encryption(rc)
  } and
  all tfplan.resource_changes as _, rc {
    # EBS volumes for GPU instances
    rc.type != "aws_ebs_volume" or
    rc.change.after.encrypted else false
  }
}

# S3 encryption validation
check_s3_encryption = func(rc) {
  # Check for encryption configuration
  # Note: In Terraform, this might be a separate resource
  # For this policy, we check tags as a proxy
  tags = rc.change.after.tags else {}
  
  # Production buckets must indicate encryption
  if tags["environment"] == "production" {
    # Check if bucket is marked for encryption (simplified check)
    return tags["encryption"] == "enabled" or tags["purpose"] == "ml-training"
  }
  
  return true
}

# SageMaker encryption validation
check_sagemaker_encryption = func(rc) {
  # For endpoint configurations, check kms_key_arn
  if rc.type == "aws_sagemaker_endpoint_configuration" {
    kms_key = rc.change.after.kms_key_arn else ""
  } else {
    # For other resources, check kms_key_id
    kms_key = rc.change.after.kms_key_id else ""
  }
  
  return kms_key != "" and strings.has_prefix(kms_key, "arn:aws:kms:")
}

# Network isolation for AI workloads
network_isolation_check = rule {
  all tfplan.resource_changes as _, rc {
    # SageMaker models must use VPC
    rc.type != "aws_sagemaker_model" or
    check_vpc_config(rc)
  } and
  all tfplan.resource_changes as _, rc {
    # EC2 instances must not have public IPs
    rc.type != "aws_instance" or
    not (rc.change.after.associate_public_ip_address else false)
  }
}

# VPC configuration validation
check_vpc_config = func(rc) {
  vpc_config = rc.change.after.vpc_config else []
  
  if require_vpc_isolation {
    return length(vpc_config) > 0 and
           length(vpc_config[0].subnets) > 1 and
           length(vpc_config[0].security_group_ids) > 0
  }
  return true
}

# Instance metadata service v2 (IMDSv2) enforcement
imdsv2_check = rule when require_imdsv2 {
  all tfplan.resource_changes as _, rc {
    rc.type != "aws_instance" or
    check_imdsv2(rc)
  }
}

# IMDSv2 validation
check_imdsv2 = func(rc) {
  metadata_options = rc.change.after.metadata_options else []
  
  return length(metadata_options) > 0 and
         metadata_options[0].http_tokens == "required" and
         metadata_options[0].http_endpoint == "enabled"
}

# GPU instance security checks
gpu_instance_check = rule {
  all tfplan.resource_changes as _, rc {
    rc.type != "aws_instance" or
    not is_gpu_instance(rc) or
    check_gpu_security(rc)
  }
}

# Check if instance is GPU-enabled
is_gpu_instance = func(rc) {
  instance_type = rc.change.after.instance_type else ""
  return strings.contains(instance_type, "p3") or
         strings.contains(instance_type, "p4") or
         strings.contains(instance_type, "g4") or
         strings.contains(instance_type, "g5")
}

# GPU-specific security requirements
check_gpu_security = func(rc) {
  tags = rc.change.after.tags else {}
  
  # Must have GPU monitoring enabled
  return tags["gpu-monitoring"] == "enabled" and
         check_approved_ami(rc) and
         check_security_groups(rc)
}

# Validate AMI is approved for ML workloads
check_approved_ami = func(rc) {
  ami = rc.change.after.ami else ""
  
  return any allowed_amis as allowed {
    if strings.has_suffix(allowed, "*") {
      prefix = strings.trim_suffix(allowed, "*")
      strings.has_prefix(ami, prefix)
    } else {
      ami == allowed
    }
  }
}

# Security group validation
check_security_groups = func(rc) {
  security_groups = rc.change.after.vpc_security_group_ids else []
  
  # Must have at least one security group
  # In production, would validate specific rules
  return length(security_groups) > 0
}

# IAM role requirements for AI services
iam_check = rule {
  all tfplan.resource_changes as _, rc {
    rc.type not in ["aws_sagemaker_model", "aws_sagemaker_notebook_instance"] or
    check_iam_role(rc)
  }
}

# Validate IAM role configuration
check_iam_role = func(rc) {
  # For SageMaker models
  if rc.type == "aws_sagemaker_model" {
    role_arn = rc.change.after.execution_role_arn else ""
  } else {
    role_arn = rc.change.after.role_arn else ""
  }
  
  # Must have a role assigned
  return role_arn != "" and
         (strings.contains(role_arn, "SageMaker") or
          strings.contains(role_arn, "MLOps") or
          strings.contains(role_arn, "DataScience"))
}

# Logging and monitoring requirements
logging_check = rule {
  all tfplan.resource_changes as _, rc {
    rc.type not in ["aws_sagemaker_endpoint", "aws_sagemaker_model", "aws_instance"] or
    check_logging_enabled(rc)
  }
}

# Validate logging configuration
check_logging_enabled = func(rc) {
  tags = rc.change.after.tags else {}
  
  # Must have logging enabled
  return tags["cloudwatch-logs"] == "enabled" or
         tags["logging-enabled"] == "true"
}

# Main security baseline rule
main = rule {
  encryption_check and
  network_isolation_check and
  imdsv2_check and
  gpu_instance_check and
  iam_check and
  logging_check
} else {
  "Security baseline violation: 1) All storage must be encrypted (S3, EBS, SageMaker) 2) AI models must use VPC isolation 3) EC2 instances must use IMDSv2 4) GPU instances need approved AMIs and monitoring 5) Proper IAM roles required 6) CloudWatch logging must be enabled"
}